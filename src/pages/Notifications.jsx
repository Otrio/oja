import React, { useState } from 'react'
import { useNotifications } from '../context/NotificationContext'
import ConfirmationModal from '../components/ConfirmationModal'
import { Link } from 'react-router-dom'
import { LoadingSkeleton, EmptyState } from '../components/LoadingStates'

export default function NotificationsPage() {
  const { getNotificationsPage, notifications, deleteNotification, clearAllNotifications, markAsRead, deleteAllNotifications } = useNotifications()
  const [page, setPage] = React.useState(1)
  const [deleting, setDeleting] = useState(null)
  const [deletingAll, setDeletingAll] = useState(false)
  const perPage = 10

  const notifs = getNotificationsPage(page, perPage)
  const total = notifications.length
  const totalPages = Math.max(1, Math.ceil(total / perPage))
  const loading = (notifications === undefined)

  const handleDelete = () => {
    if (!deleting) return
    deleteNotification(deleting.id)
    setDeleting(null)
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-white">Notifications</h1>
          <p className="text-sm text-gray-400 mt-1">All notifications generated by the system, persisted for review.</p>
        </div>
        <div className="flex flex-wrap gap-2">
          <button onClick={clearAllNotifications} className="flex-1 sm:flex-none px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm sm:text-base">Mark all as read</button>
          <button onClick={() => setDeletingAll(true)} className="flex-1 sm:flex-none px-4 py-2 bg-red-900/30 text-red-400 border border-red-800 rounded-lg hover:bg-red-900/50 text-sm sm:text-base">Delete all</button>
          <Link to="/" className="flex-1 sm:flex-none px-4 py-2 bg-gray-700 text-white border border-gray-600 rounded-lg hover:bg-gray-600 text-center text-sm sm:text-base">Back</Link>
        </div>
      </div>

      <div className="bg-gray-800 border border-gray-700 rounded-lg overflow-hidden">
        {loading ? (
          <div className="p-4">
            <LoadingSkeleton count={6} />
          </div>
        ) : notifications.length === 0 ? (
          <EmptyState icon="fas fa-bell" title="No notifications" description="You have no notifications at the moment." />
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-700 border-b border-gray-600">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Message</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-gray-800">
                {notifs.map((n, idx) => (
                  <tr key={n.id} className={`hover:bg-gray-700 transition-colors duration-200 ${idx > 0 ? 'border-t-0' : ''}`}>
                    <td className={`px-3 sm:px-6 py-4 whitespace-nowrap ${idx > 0 ? 'pt-2' : ''}`}>
                      <div className="text-sm font-medium text-white">{n.title}</div>
                    </td>
                    <td className={`px-3 sm:px-6 py-4 whitespace-nowrap ${idx > 0 ? 'pt-2' : ''}`}>
                      <div className="text-sm text-gray-300">{n.message || '-'}</div>
                    </td>
                    <td className={`px-3 sm:px-6 py-4 whitespace-nowrap ${idx > 0 ? 'pt-2' : ''}`}>
                      <div className="text-sm text-white">{new Date(n.timestamp).toLocaleString()}</div>
                    </td>
                    <td className={`px-3 sm:px-6 py-4 whitespace-nowrap ${idx > 0 ? 'pt-2' : ''}`}>
                      <div className={`text-sm ${n.read ? 'text-gray-400' : 'text-blue-400'}`}>{n.read ? 'Read' : 'Unread'}</div>
                    </td>
                    <td className={`px-3 sm:px-6 py-4 whitespace-nowrap ${idx > 0 ? 'pt-2' : ''}`}>
                      <div className="flex items-center gap-2">
                        {!n.read && (
                          <button onClick={() => markAsRead(n.id)} className="p-2 sm:p-3 text-blue-400 hover:bg-blue-900/30 rounded-lg transition-colors duration-200" title="Mark read">
                            <i className="fas fa-envelope-open-text text-sm"></i>
                          </button>
                        )}
                        <button onClick={() => setDeleting(n)} className="p-2 sm:p-3 text-red-400 hover:bg-red-900/30 rounded-lg transition-colors duration-200" title="Delete">
                          <i className="fas fa-trash text-sm"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {notifications.length > perPage && (
              <div className="p-4 flex items-center justify-center gap-2">
                <button disabled={page<=1} onClick={() => setPage(p => Math.max(1,p-1))} className="px-3 py-1 bg-gray-700 text-white rounded disabled:opacity-50 hover:bg-gray-600">Prev</button>
                <div className="text-sm text-gray-300">Page {page} of {totalPages}</div>
                <button disabled={page>=totalPages} onClick={() => setPage(p => Math.min(totalPages,p+1))} className="px-3 py-1 bg-gray-700 text-white rounded disabled:opacity-50 hover:bg-gray-600">Next</button>
              </div>
            )}
          </div>
        )}
      </div>

      {deleting && (
        <ConfirmationModal
          isOpen={true}
          onClose={() => setDeleting(null)}
          onConfirm={handleDelete}
          title="Delete Notification"
          message={`Are you sure you want to delete the notification "${deleting.title}"?`}
          confirmText="Delete"
          cancelText="Cancel"
          type="danger"
        />
      )}

        {deletingAll && (
          <ConfirmationModal
            isOpen={true}
            onClose={() => setDeletingAll(false)}
            onConfirm={() => { deleteAllNotifications(); setDeletingAll(false) }}
            title="Delete all notifications"
            message={`Are you sure you want to delete ALL notifications? This action cannot be undone.`}
            confirmText="Delete all"
            cancelText="Cancel"
            type="danger"
          />
        )}
    </div>
  )
}
